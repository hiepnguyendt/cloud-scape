[
{
	"uri": "//localhost:1313/2-basic-layout/2-1-top-nav-component/",
	"title": "Add the top navigation component",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s start building our application by first adding the top navigation component . The top navigation contains our logo and can include additional navigation elements, all of which will persist across all our service pages.\nOpen src/pages/home/app.tsx in your IDE. Import the component by import TopNavigation from '@cloudscape-design/components/top-navigation';. Add the component to the App component\u0026rsquo;s return statement. import React from \u0026#39;react\u0026#39;;\rimport TopNavigation from \u0026#39;@cloudscape-design/components/top-navigation\u0026#39;;\rexport default function App() {\rreturn (\r\u0026lt;TopNavigation\ridentity={{\rlogo: { src: \u0026#39;/logo.svg\u0026#39;, alt: \u0026#39;Chocolate Factory Logo\u0026#39; },\rtitle: \u0026#39;Chocolate Factory\u0026#39;,\rhref: \u0026#39;/home/index.html\u0026#39;,\r}}\ri18nStrings={{\roverflowMenuTriggerText: \u0026#39;More\u0026#39;,\roverflowMenuTitleText: \u0026#39;All\u0026#39;,\r}}\r/\u0026gt;\r);\r} Take a look in your browser to see the top navigation component in action ðŸš€ See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/",
	"title": "Build a cloud experience with Cloudscape Design System",
	"tags": [],
	"description": "",
	"content": "Build a cloud experience with Cloudscape Design System In this workshop, we will use the open source Cloudscape Design System to build a responsive and accessible web application for cloud management. The web application will leverage the open source React components offered by Cloudscape.\nWe\u0026rsquo;ll go from an empty React TypeScript project to building a basic application using Cloudscape components. You\u0026rsquo;ll be introduced to a few of our core patterns, along with the corresponding components necessary to implement these patterns. Every step in this workshop can be started independently by checking out the associated branch.\nLearning Objectives The main learning objective of this workshop is to introduce you to Cloudscape through building a web application.\nThis workshop is divided into three steps:\nIn the first step, you will learn how to create the basic structure for the webapp. It contains the top navigation and the application layout which will be used throughout the workshop. The second step is all about viewing resources. You will implement a table and enrich its functionality step by step. Finally, in the third step, you will learn about creating resources and validation. You will see how form handling works with Cloudscape by using multiple patterns. Here\u0026rsquo;s a preview showing the workshop application we\u0026rsquo;re building:\nStep 1: Basic layout Step 2: Table view Step 3: Creation flow About Cloudscape Design System Cloudscape is an open source design system to create web applications. It was built for and is used by Amazon Web Services (AWS) products and services. We created it in 2016 to improve the user experience across web applications owned by AWS services, and also to help teams implement those applications faster. Since then, we have continued enhancing the system based on customer feedback and research.\nAudience This workshop requires knowledge of frontend development. As such, you should be familiar with: React, TypeScript, Git, the JavaScript programming language, and typing commands in the Terminal.\nContent Preparation Basic Layout Table View Creation Flow Wrapping up "
},
{
	"uri": "//localhost:1313/1-preparation/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Installs on your Laptop Before we begin, there are a few things you need to have installed on your laptop:\nGit Node.js 14.2 or higher npm 7.10 or higher Have access to your preferred IDE To learn more about the tools, you can visit the following links:\nhttps://git-scm.com https://nodejs.org https://www.npmjs.com Installs Verification If you already have one or several of these dependencies installed, just verify you have the latest version. Here are the versions we tested the workshop instructions with. Any more recent version should work as well.\ngit --version\r# git version 2.30.1 or higher\rnode --version\r# v14.21.0 or higher\rnpm --version\r# 6.14.17 or higher "
},
{
	"uri": "//localhost:1313/1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this workshop, we will use the open source Cloudscape Design System to build a responsive and accessible web application for cloud management. The web application will leverage the open source React components offered by Cloudscape. The workshop requires knowledge of front-end development, React and TypeScript.\nYou\u0026rsquo;ll start this workshop with an empty React TypeScript project and finish by building a basic application using Cloudscape components. Along the way, you\u0026rsquo;ll be introduced to a few of our core patterns and corresponding components necessary to implement these patterns.\nIf you have any issues during the workshop, please reach out to us directly. We\u0026rsquo;ll do our best to help.\nWorkshop Resources Cloudscape documentation website Workshop package on GitHub "
},
{
	"uri": "//localhost:1313/2-basic-layout/step-preparation/",
	"title": "Step preparation",
	"tags": [],
	"description": "",
	"content": "Before we start, let\u0026rsquo;s prepare our environment for this workshop step.\nEnsure you\u0026rsquo;re in the cloudscape-design-system-workshop folder.\nIf you have the development server already running, stop that command in your terminal.\nCheck out the step-1 branch by executing:\ngit checkout step-1 Spin up the development server by running:\nnpm run dev Port 8080 verification. Verify the output in your terminal to check if the development server is running on port 8080. The output should mention port 8080 as below:\nVITE v3.2.3 ready in 544 ms\râžœ Local: http://localhost:8080/\râžœ Network: use --host to expose Troubleshooting: \u0026lsquo;Port 8080 is already in use\u0026rsquo;.\nIf the output states Port 8080 is in use, trying another one... then you need to close the command which uses this port. This could happen when the dev server has stopped and the port did not automatically close. To close the used port, first stop the dev server command followed by closing the process which runs on port 8080 by executing:\nif [[ $(lsof -t -i:8080) ]]; then kill -9 $(sudo lsof -t -i:8080); fi\nNow, spin up the development server again and do the port 8080 verificatio\nOpen the /home/index.html page we are working on in your browser. The instructions differ depending on the environment where you are running the workshop. "
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/step-preparation/",
	"title": "Step preparation",
	"tags": [],
	"description": "",
	"content": "Before we continue, let\u0026rsquo;s prepare our environment for this workshop step.\nEnsure you\u0026rsquo;re in the cloudscape-design-system-workshop folder. If you have the development server already running, stop that command in your terminal. Check out the step-2 branch by executing. git checkout step-2 Override local changes\nFor overriding your local changes, appending the -f flag for a forced check out: git checkout step-2 -f\nSpin up the development server by running: npm run dev Port 8080 verification Verify the output in your terminal to check if the development server is running on port 8080. The output should mention port 8080 as below:\nVITE v3.2.3 ready in 544 ms\râžœ Local: http://localhost:8080/\râžœ Network: use --host to expose Troubleshooting: \u0026lsquo;Port 8080 is already in use\u0026rsquo;.\nIf the output states Port 8080 is in use, trying another one\u0026hellip; then you need to close the command which uses this port. This could happen when the dev server has stopped and the port did not automatically close. To close the used port, first stop the dev server command followed by closing the process which runs on port 8080 by executing: if [[ $(lsof -t -i:8080) ]]; then kill -9 $(sudo lsof -t -i:8080); fi\nNow, spin up the development server again and do the port 8080 verification.\nOpen the /flavors/index.html page we are working on in your browser. The instructions differ depending on the environment where you are running the workshop. Open http://localhost:8080/flavors/index.html in your browser to see this page: "
},
{
	"uri": "//localhost:1313/4-creation-flow/step-preparation/",
	"title": "Step preparation",
	"tags": [],
	"description": "",
	"content": "Before we continue, let\u0026rsquo;s prepare our environment for this workshop step.\nEnsure you\u0026rsquo;re in the cloudscape-design-system-workshop folder. If you have the development server already running, stop that command in your terminal. Check out the step-3 branch by executing. git checkout step-3 Override local changes For overriding your local changes, appending the -f flag for a forced check out: git checkout step-3 -f\nSpin up the development server by running:\nnpm run dev Port 8080 verification Verify the output in your terminal to check if the development server is running on port 8080. The output should mention port 8080 as below:\nVITE v3.2.3 ready in 544 ms\râžœ Local: http://localhost:8080/\râžœ Network: use --host to expose Troubleshooting: \u0026lsquo;Port 8080 is already in use\u0026rsquo;.\nIf the output states Port 8080 is in use, trying another one... then you need to close the command which uses this port. This could happen when the dev server has stopped and the port did not automatically close. To close the used port, first stop the dev server command followed by closing the process which runs on port 8080 by executing: if [[ $(lsof -t -i:8080) ]]; then kill -9 $(sudo lsof -t -i:8080); fi\nNow, spin up the development server again and do the port 8080 verification.\nOpen the /create-flavor/index.html page we are working on in your browser. The instructions differ depending on the environment where you are running the workshop.\nOpen http://127.0.0.1:8080/create-flavor/index.html in your browser to see this page: "
},
{
	"uri": "//localhost:1313/2-basic-layout/2-2-app-layout-component/",
	"title": "Add the app layout component",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s continue adding the app layout component. This component provides the basic layout for all types of pages, including collapsible side navigation and a tools panel.\nOpen src/pages/home/app.tsx in your IDE. Import the component using import AppLayout from '@cloudscape-design/components/app-layout';. Add the \u0026lt;AppLayout /\u0026gt; as a sibling next to the \u0026lt;TopNavigation /\u0026gt; component wrapped in a React fragment. Set the AppLayout\u0026rsquo;s ariaLabels properties as described in the AppLayout API documentation. The AppLayout component can be used with different headers. It provides property headerSelector to specify the CSS selector of the header you are using. Setting this property is important to ensure that the AppLayout position doesn\u0026rsquo;t overlap the header.\na. Wrap the \u0026lt;TopNavigation /\u0026gt; component with a \u0026lt;div /\u0026gt; element. Add a id attribute with value top-nav to the wrapping \u0026lt;div /\u0026gt; element.\nb. Set the AppLayout\u0026rsquo;s headerSelector property to a valid css selector #top-nav. To prevent an overlap, make the TopNavigation sticky. This gets handled inside src/pages/home/styles.css.\na. Add the required import import './styles.css';.\nb. Add the necessary styling for the top navigation. Hint: An example of this styling can be found on the bottom of the Top navigation documentation page. This is how src/pages/home/app.tsx looks like after this step: import React from \u0026#39;react\u0026#39;;\rimport TopNavigation from \u0026#39;@cloudscape-design/components/top-navigation\u0026#39;;\rimport AppLayout from \u0026#39;@cloudscape-design/components/app-layout\u0026#39;;\rimport \u0026#39;./styles.css\u0026#39;;\rexport default function App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;div id=\u0026#34;top-nav\u0026#34;\u0026gt;\r\u0026lt;TopNavigation\ridentity={{\rlogo: { src: \u0026#39;/logo.svg\u0026#39;, alt: \u0026#39;Chocolate Factory Logo\u0026#39; },\rtitle: \u0026#39;Chocolate Factory\u0026#39;,\rhref: \u0026#39;/home/index.html\u0026#39;,\r}}\ri18nStrings={{\roverflowMenuTriggerText: \u0026#39;More\u0026#39;,\roverflowMenuTitleText: \u0026#39;All\u0026#39;,\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;AppLayout\rheaderSelector=\u0026#34;#top-nav\u0026#34;\rariaLabels={{\rnavigation: \u0026#39;Navigation drawer\u0026#39;,\rnavigationClose: \u0026#39;Close navigation drawer\u0026#39;,\rnavigationToggle: \u0026#39;Open navigation drawer\u0026#39;,\rnotifications: \u0026#39;Notifications\u0026#39;,\rtools: \u0026#39;Help panel\u0026#39;,\rtoolsClose: \u0026#39;Close help panel\u0026#39;,\rtoolsToggle: \u0026#39;Open help panel\u0026#39;,\r}}\r/\u0026gt;\r\u0026lt;/\u0026gt;\r);\r} This is how src/pages/home/styles.css looks like after this step:\n#top-nav\r{\rposition: sticky;\rtop: 0;\rz-index: 1002;\r} You should now have an excitingly empty page consisting of an empty app layout, top navigation, and no content.\nSee the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/4-creation-flow/4-1-form-component/",
	"title": "Add the form component",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s add the form component to our page. This component should be used for a section of a page that has interactive controls with which a user can submit information to a web server. Take a look at the form component documentation and make yourself familiar with the usage guidelines and API. Compared to the previous steps, there is one change to the app layout. Can you figure it out? AppLayout's contentType is now set to form. We apply the recommended default panel states by setting contentType=\u0026lsquo;form\u0026rsquo; in the app layout component. This sets the side navigation to be closed by default.\nOpen src/pages/create-flavor/app.tsx in your IDE. Import the component with @cloudscape-design/components/form;. Add the \u0026lt;Form /\u0026gt; component to the app layout component\u0026rsquo;s return statement. As we\u0026rsquo;ve seen in the component\u0026rsquo;s playground example, we have to add it as a child of the native \u0026lt;form /\u0026gt; (lowercase \u0026ldquo;F\u0026rdquo;) element. The native form enables us to handle the submission and make use of React FormEvents API. Lastly, add a \u0026ldquo;Cancel\u0026rdquo; and a \u0026ldquo;Create flavor\u0026rdquo; button to the form by using the actions property (Hint: You can find a code example in the form component\u0026rsquo;s playground) See how src/pages/create-flavor/app.tsx looks like after this step:\rimport React from \u0026#39;react\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport Form from \u0026#39;@cloudscape-design/components/form\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport HelpPanel from \u0026#39;@cloudscape-design/components/help-panel\u0026#39;;\rimport SpaceBetween from \u0026#39;@cloudscape-design/components/space-between\u0026#39;;\rimport ContentLayout from \u0026#39;@cloudscape-design/components/content-layout\u0026#39;;\rimport Breadcrumbs from \u0026#39;../../components/breadcrumbs\u0026#39;;\rimport Navigation from \u0026#39;../../components/navigation\u0026#39;;\rimport ShellLayout from \u0026#39;../../layouts/shell\u0026#39;;\rexport default function App() {\rreturn (\r\u0026lt;ShellLayout\rcontentType=\u0026#34;form\u0026#34;\rbreadcrumbs={\u0026lt;Breadcrumbs active={{ text: \u0026#39;Create flavor\u0026#39;, href: \u0026#39;/create-flavor/index.html\u0026#39; }} /\u0026gt;}\rnavigation={\u0026lt;Navigation /\u0026gt;}\rtools={\u0026lt;HelpPanel header={\u0026lt;h2\u0026gt;Help panel\u0026lt;/h2\u0026gt;} /\u0026gt;}\r\u0026gt;\r\u0026lt;ContentLayout\rheader={\r\u0026lt;Header\rvariant=\u0026#34;h1\u0026#34;\rdescription=\u0026#34;Create a new flavor by specifying ingredients, quality, and price. On creation a flavor will be tested by the product and marketing team.\u0026#34;\r\u0026gt;\rCreate flavor\r\u0026lt;/Header\u0026gt;\r}\r\u0026gt;\r\u0026lt;form onSubmit={event =\u0026gt; event.preventDefault()}\u0026gt;\r\u0026lt;Form\ractions={\r\u0026lt;SpaceBetween direction=\u0026#34;horizontal\u0026#34; size=\u0026#34;xs\u0026#34;\u0026gt;\r\u0026lt;Button href=\u0026#34;/flavors/index.html\u0026#34; variant=\u0026#34;link\u0026#34;\u0026gt;\rCancel\r\u0026lt;/Button\u0026gt;\r\u0026lt;Button formAction=\u0026#34;submit\u0026#34; variant=\u0026#34;primary\u0026#34;\u0026gt;\rCreate flavor\r\u0026lt;/Button\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r}\r\u0026gt;\u0026lt;/Form\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/ContentLayout\u0026gt;\r\u0026lt;/ShellLayout\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/2-basic-layout/",
	"title": "Basic layout",
	"tags": [],
	"description": "",
	"content": "The workshop application makes use of the top navigation pattern and the layout pattern to lay out a few of the essential components on a page. In this first assignment, you\u0026rsquo;ll start with a minimally bootstrapped application and finish with your first page using Cloudscape components.\nBefore getting started, it is always useful to familiarize yourself with the component API and design documentation. In this step, we\u0026rsquo;ll look at the following components to build a basic layout:\nTop navigation component to render the application\u0026rsquo;s header. App layout component to render the provided content. Side navigation component to render the navigation menu. Breadcrumb group component which reflects the information architecture of our application. Content to the app layout component provides the basic layout for the header and content of a page Component for dashboard added predefined content for the dashboard page Explore the top navigation component See how the app looks before and after this step:\nBefore After "
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-1-prepare-column-definitions/",
	"title": "Prepare the column definitions",
	"tags": [],
	"description": "",
	"content": "We can now define what each column in the table will display by setting column definitions with the following steps:\nOpen src/pages/flavors/components/flavors-table.tsx in your IDE. This custom component is already embedded in the flavors page inside src/pages/flavors/app.tsx. It receives the data that we want to display in the table as a property. To get a sense about the data we\u0026rsquo;ll display, take a look at the Flavor interface in src/pages/flavors/data.ts. We use mock data for the workshop. In a real world application the data would be obtained by fetching it from a server. Based on this interface, create the column definitions inside src/pages/flavors/components/flavors-table.tsx. Follow the given structure from the table API documentation Import the TableProps interface using import { TableProps } from '@cloudscape-design/components/table';. Here\u0026rsquo;s the columnDefinitions we\u0026rsquo;re using placed above the existing VariationTable component: const columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rminWidth: 180,\r},\r]; "
},
{
	"uri": "//localhost:1313/1-preparation/setup/",
	"title": "Setup Environment",
	"tags": [],
	"description": "",
	"content": "To get started, set up the provided workshop application by following the steps:\nClone the workshop repository in your development environment: git clone https://github.com/aws-samples/cloudscape-design-system-workshop.git Change to the workshop directory: cd cloudscape-design-system-workshop Install the dependencies by running: npm install With that explained, you\u0026rsquo;re ready to proceed with the first workshop step. About the workshop repository All steps towards the final application are available as branches on the repository. If you have local changes, stash them by using git stash or force the check out by adding the -f option to the checkout command.\nStep 1: Basic layout â†’ Starting the step: git checkout step-1. Get the completed step: git checkout - step-1-completed Step 2: Table view â†’ Starting the step: git checkout step-2. Get the completed step: git checkout step-2-completed Step 3: Creation flow â†’ Starting the step: git checkout step-3. Get the completed step: git checkout step-3-completed To view the final workshop application, check out the main branch. Clean up If you want to clean up the files created during the workshop, navigate to the workshop repository folder and delete it.\n"
},
{
	"uri": "//localhost:1313/4-creation-flow/4-2-input-form/",
	"title": "Add the first input form field",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s get interactive and fill our form with life. In this step, we\u0026rsquo;ll add input form elements. Cloudscape input form elements are controlled components. This means their value is controlled by React (more information about controlled components on React\u0026rsquo;s documentation website). Also, every input form components will be wrapped by the FormField component.\nHere\u0026rsquo;s how the form will look after we added the input form components: Before you take a look at the code after this step, try it by yourself. Use the component\u0026rsquo;s documentation pages for help.\nFor this field we will add the following imports:\nimport Container from \u0026#39;@cloudscape-design/components/container\u0026#39;;\rimport FormField from \u0026#39;@cloudscape-design/components/form-field\u0026#39;;\rimport Tiles from \u0026#39;@cloudscape-design/components/tiles\u0026#39;; Add a Container component to the form with a Header (variant: h2) named \u0026ldquo;Chocolate Shape\u0026rdquo; as a child to the Form component.\nAdd a FormField component as child of the Container with the label set to \u0026ldquo;Shape\u0026rdquo; and stretch set to true.\nAdd a Tiles component as a child of FormField and add the labels according to the screenshot above.\nSee how src/pages/create-flavor/app.tsx looks like after this step:\rimport React, { useState } from \u0026#39;react\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport Form from \u0026#39;@cloudscape-design/components/form\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport HelpPanel from \u0026#39;@cloudscape-design/components/help-panel\u0026#39;;\rimport Container from \u0026#39;@cloudscape-design/components/container\u0026#39;;\rimport SpaceBetween from \u0026#39;@cloudscape-design/components/space-between\u0026#39;;\rimport ContentLayout from \u0026#39;@cloudscape-design/components/content-layout\u0026#39;;\rimport FormField from \u0026#39;@cloudscape-design/components/form-field\u0026#39;;\rimport Tiles from \u0026#39;@cloudscape-design/components/tiles\u0026#39;;\rimport Breadcrumbs from \u0026#39;../../components/breadcrumbs\u0026#39;;\rimport Navigation from \u0026#39;../../components/navigation\u0026#39;;\rimport ShellLayout from \u0026#39;../../layouts/shell\u0026#39;;\rexport default function App() {\rconst [shape, setShape] = useState(\u0026#39;bar\u0026#39;);\rreturn (\r\u0026lt;ShellLayout\rcontentType=\u0026#34;form\u0026#34;\rbreadcrumbs={\u0026lt;Breadcrumbs active={{ text: \u0026#39;Create Flavor\u0026#39;, href: \u0026#39;/create-flavor/index.html\u0026#39; }} /\u0026gt;}\rnavigation={\u0026lt;Navigation /\u0026gt;}\rtools={\u0026lt;HelpPanel header={\u0026lt;h2\u0026gt;Help Panel\u0026lt;/h2\u0026gt;} /\u0026gt;}\r\u0026gt;\r\u0026lt;ContentLayout\rheader={\r\u0026lt;Header\rvariant=\u0026#34;h1\u0026#34;\rdescription=\u0026#34;Create a new flavor by specifying ingredients, quality, and price. On creation a flavor will be tested by the product and marketing team.\u0026#34;\r\u0026gt;\rCreate Flavor\r\u0026lt;/Header\u0026gt;\r}\r\u0026gt;\r\u0026lt;form onSubmit={event =\u0026gt; event.preventDefault()}\u0026gt;\r\u0026lt;Form\ractions={\r\u0026lt;SpaceBetween direction=\u0026#34;horizontal\u0026#34; size=\u0026#34;xs\u0026#34;\u0026gt;\r\u0026lt;Button href=\u0026#34;/flavors/index.html\u0026#34; variant=\u0026#34;link\u0026#34;\u0026gt;\rCancel\r\u0026lt;/Button\u0026gt;\r\u0026lt;Button formAction=\u0026#34;submit\u0026#34; variant=\u0026#34;primary\u0026#34;\u0026gt;\rCreate flavor\r\u0026lt;/Button\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r}\r\u0026gt;\r\u0026lt;Container header={\u0026lt;Header variant=\u0026#34;h2\u0026#34;\u0026gt;Chocolate Shape\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;FormField label=\u0026#34;Shape\u0026#34; stretch={true}\u0026gt;\r\u0026lt;Tiles\ritems={[\r{\rvalue: \u0026#39;bar\u0026#39;,\rlabel: \u0026#39;Bar\u0026#39;,\rdescription: \u0026#39;Traditional bar shaped chocolate\u0026#39;,\r},\r{\rvalue: \u0026#39;praline\u0026#39;,\rlabel: \u0026#39;Pralines\u0026#39;,\rdescription: \u0026#39;Sophisticated and premium-looking chocolate shape\u0026#39;,\r},\r]}\rvalue={shape}\ronChange={e =\u0026gt; setShape(e.detail.value)}\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/Container\u0026gt;\r\u0026lt;/Form\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/ContentLayout\u0026gt;\r\u0026lt;/ShellLayout\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/2-basic-layout/2-3-side-nav-to-app-layout/",
	"title": "Add the side navigation component to the app layout",
	"tags": [],
	"description": "",
	"content": "Next, we will extend the app layout with the side navigation component. The side navigation will be shown inside the app layout\u0026rsquo;s navigation slot. It contains a list of navigational links that point to the pages within an application.\nTake a look at the guidance and examples for side navigation and app layout . Try to add the side navigation on your own using dummy data. Create the component in a separate file (src/pages/home/components/navigation.tsx) and provide the component to the app layout\u0026rsquo;s navigation slot.\nHere are the individual steps to create the side navigation in a separate file:\nOpen src/pages/home/components/navigation.tsx and import the component and it\u0026rsquo;s props using import SideNavigation, { SideNavigationProps } from '@cloudscape-design/components/side-navigation';. Add the inside our custom component and wire it with the properties we want to display in the side navigation: Specify the href of the currently active link we use the current path name location.pathname. Set the header property to the current page header={{ href: '/home/index.html', text: 'Service' }} Here\u0026rsquo;s how src/pages/home/components/navigation.tsx looks like: ``` import React from \u0026lsquo;react\u0026rsquo;; import SideNavigation, { SideNavigationProps } from \u0026lsquo;@cloudscape-design/components/side-navigation\u0026rsquo;;\nconst items: SideNavigationProps['items'] = [\r// More pages got added as part of the workshop.\r{ type: 'link', text: 'Dashboard', href: '/home/index.html' },\r];\rexport default function Navigation() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;SideNavigation\ractiveHref={location.pathname}\rheader={{ href: '/home/index.html', text: 'Service' }}\ritems={items}\r/\u0026gt;\r\u0026lt;/\u0026gt;\r);\r}\r```\rNow attach the previously created component with the app layout to display it:\nOpen src/pages/home/app.tsx in your IDE. Import our \u0026lt;Navigation /\u0026gt; component with import Navigation from './components/navigation';. Add it to the \u0026lt;AppLayout /\u0026gt;\u0026rsquo;s navigation property: navigation={\u0026lt;Navigation /\u0026gt;}. See how src/pages/home/app.tsx looks like after this step.\rimport React from \u0026#39;react\u0026#39;;\rimport TopNavigation from \u0026#39;@cloudscape-design/components/top-navigation\u0026#39;;\rimport AppLayout from \u0026#39;@cloudscape-design/components/app-layout\u0026#39;;\rimport Navigation from \u0026#39;./components/navigation\u0026#39;;\rimport \u0026#39;./styles.css\u0026#39;;\rexport default function App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;div id=\u0026#34;top-nav\u0026#34;\u0026gt;\r\u0026lt;TopNavigation\ridentity={{\rlogo: { src: \u0026#39;/logo.svg\u0026#39;, alt: \u0026#39;Chocolate Factory Logo\u0026#39; },\rtitle: \u0026#39;Chocolate Factory\u0026#39;,\rhref: \u0026#39;/home/index.html\u0026#39;,\r}}\ri18nStrings={{\roverflowMenuTriggerText: \u0026#39;More\u0026#39;,\roverflowMenuTitleText: \u0026#39;All\u0026#39;,\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;AppLayout\rheaderSelector=\u0026#34;#top-nav\u0026#34;\rariaLabels={{\rnavigation: \u0026#39;Navigation drawer\u0026#39;,\rnavigationClose: \u0026#39;Close navigation drawer\u0026#39;,\rnavigationToggle: \u0026#39;Open navigation drawer\u0026#39;,\rnotifications: \u0026#39;Notifications\u0026#39;,\rtools: \u0026#39;Help panel\u0026#39;,\rtoolsClose: \u0026#39;Close help panel\u0026#39;,\rtoolsToggle: \u0026#39;Open help panel\u0026#39;,\r}}\rnavigation={\u0026lt;Navigation /\u0026gt;}\r/\u0026gt;\r\u0026lt;/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-2-make-column-resizable/",
	"title": "Make columns resizable",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s make the columns resizable. With column resizing, the user can manually resize the column width by dragging the divider on the right of a column header.\nUsers can also reveal, hide, and adjust the content to the screen area. To do that, add the resizableColumns={true} property to the component;\nTry out resizing the columns in your browser!\nThis step did not contain any visual changes reflected on the page - the table columns are now interactive.\nSee the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/",
	"title": "Table view",
	"tags": [],
	"description": "",
	"content": "A common use case for a data-heavy web application is to view resources . In this step, we\u0026rsquo;ll look at how we can use the table view pattern to visualize and organize data.\nWe\u0026rsquo;re going to create a table to list all of the chocolates that we produce in our workshop factory. This step is driven by different design patterns. We\u0026rsquo;ll take a look at these patterns, followed by implementing them using Cloudscape components. We\u0026rsquo;ll start with a basic table and end the step displaying the data in a table that is filterable, searchable, sortable, and includes pagination and configurable preferences.\nWe use mock data for the workshop and focus on how to use the components, rather than on how to connect to APIs to fetch data. In a real world application the data would be obtained by fetching it from a server.\nSounds like a lot, right? Don\u0026rsquo;t worry, some parts are predefined. Let\u0026rsquo;s jump into it!\nYou\u0026rsquo;re observing a different application structure compared to the latest state in Step 1. We have adapted the structure of what we\u0026rsquo;ve done so far to use the same app layout shared across multiple pages. One important detail about the modifications: the app layout component\u0026rsquo;s contentType property gets set to table. This is to determine the default behavior of the app layout component based on some predefined page layouts.\nSee how the app looks before and after this step:\nBefore After "
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-3-collect-hook-to-add-table/",
	"title": "Add collection hooks to the table component",
	"tags": [],
	"description": "",
	"content": "Introduction to collection hooks We\u0026rsquo;re now learning about collection hooks. Collection hooks help you handle data operations in collection components such as table or cards. The package provides utilities to handle filtering, sorting, or pagination operations for client-side collections (\u0026ldquo;client-side collections\u0026rdquo; means the full dataset describing the collection is fetched on the client side).\nTake a few minutes and familiarize yourself with the collection hooks documentation.\nAdd collection hooks to the table component The @cloudscape-design/collection-hooks package exports the useCollection hook. It takes the original collection items and a configuration to return filtered, sorted, and paginated content, according to your configuration. So let\u0026rsquo;s define the configuration, pass the original items to it, and get it set up.\nOpen src/pages/flavors/components/flavors-table.tsx Import the useCollection hook with import { useCollection } from '@cloudscape-design/collection-hooks'; Define a state to store the various preference state of our collection inside the VariationTable component. const [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 }); Next, we add the useCollection hook below the preferences hook. Pass our original items to it and define the configuration. Find the configuration details on the collection hook API documentation website.\nconst { items, filterProps, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(flavors, {\rfiltering: {},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r}); Update your table\u0026rsquo;s items property to now use the returned items value from the hook instead of flavors, and that\u0026rsquo;s it! When you take a look at the page in your browser, you won\u0026rsquo;t see any visual changes. That\u0026rsquo;s because this step contained the basic setup of the collection hook. We\u0026rsquo;ll connect the different parts (pagination, sorting, filter) with the table in the next steps.\nSee how src/pages/flavors/components/flavors-table.tsx looks like after this step.\rimport React from \u0026#39;react\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport Table, { TableProps } from \u0026#39;@cloudscape-design/components/table\u0026#39;;\rimport { useCollection } from \u0026#39;@cloudscape-design/collection-hooks\u0026#39;;\rimport { Flavor } from \u0026#39;../data\u0026#39;;\rimport { useState } from \u0026#39;react\u0026#39;;\rimport { CollectionPreferencesProps } from \u0026#39;@cloudscape-design/components\u0026#39;;\rconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rminWidth: 180,\r},\r];\rexport interface VariationTableProps {\rflavors: Flavor[];\r}\rexport default function VariationTable({ flavors }: VariationTableProps) {\rconst [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 });\rconst { items, filterProps, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(flavors, {\rfiltering: {},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r});\rreturn (\r\u0026lt;Table\u0026lt;Flavor\u0026gt;\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rvariant=\u0026#34;full-page\u0026#34;\rariaLabels={{\rselectionGroupLabel: \u0026#39;Items selection\u0026#39;,\ritemSelectionLabel: ({ selectedItems }, item) =\u0026gt; {\rconst isItemSelected = selectedItems.filter(i =\u0026gt; i.name === item.name).length;\rreturn `${item.name} is ${isItemSelected ? \u0026#39;\u0026#39; : \u0026#39;not \u0026#39;}selected`;\r},\rtableLabel: \u0026#39;Flavors table\u0026#39;,\r}}\rresizableColumns={true}\rheader={\r\u0026lt;Header variant=\u0026#34;awsui-h1-sticky\u0026#34; counter={`(${flavors.length})`}\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\r/\u0026gt;\r);\r} "
},
{
	"uri": "//localhost:1313/4-creation-flow/4-3-remaining-input-form-fields/",
	"title": "Add remaining input form fields",
	"tags": [],
	"description": "",
	"content": "Now it\u0026rsquo;s time to add the remaining input form fields. You can use the previous step as orientation to add the remaining form fields.\nAdd the \u0026ldquo;Ingredients\u0026rdquo; Container containing the Multiselect and RadioGroup fields. You get the data for the \u0026ldquo;List of ingredients\u0026rdquo; field from src/pages/flavors/data.ts. Add the \u0026ldquo;Marketing\u0026rdquo; Container containing the Input and Textarea fields. Use the SpaceBetween component to correctly space the FormFields vertically. Here\u0026rsquo;s how the form will look after we added the remaining input form fields: Before you take a look at the code after this step, try it by yourself. Use the components documentation pages for help (Container , Multiselect , RadioGroup , Input , Textarea , SpaceBetween).\nSee how src/pages/create-flavor/app.tsx looks like after this step:\rimport React, { useState } from \u0026#39;react\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport Form from \u0026#39;@cloudscape-design/components/form\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport HelpPanel from \u0026#39;@cloudscape-design/components/help-panel\u0026#39;;\rimport SpaceBetween from \u0026#39;@cloudscape-design/components/space-between\u0026#39;;\rimport ContentLayout from \u0026#39;@cloudscape-design/components/content-layout\u0026#39;;\rimport FormField from \u0026#39;@cloudscape-design/components/form-field\u0026#39;;\rimport Tiles from \u0026#39;@cloudscape-design/components/tiles\u0026#39;;\rimport Container from \u0026#39;@cloudscape-design/components/container\u0026#39;;\rimport Multiselect, { MultiselectProps } from \u0026#39;@cloudscape-design/components/multiselect\u0026#39;;\rimport RadioGroup from \u0026#39;@cloudscape-design/components/radio-group\u0026#39;;\rimport Textarea from \u0026#39;@cloudscape-design/components/textarea\u0026#39;;\rimport ColumnLayout from \u0026#39;@cloudscape-design/components/column-layout\u0026#39;;\rimport Input from \u0026#39;@cloudscape-design/components/input\u0026#39;;\rimport Breadcrumbs from \u0026#39;../../components/breadcrumbs\u0026#39;;\rimport Navigation from \u0026#39;../../components/navigation\u0026#39;;\rimport ShellLayout from \u0026#39;../../layouts/shell\u0026#39;;\rimport { chocolate, fruits } from \u0026#39;../flavors/data\u0026#39;;\rconst options = [...fruits, ...chocolate].map(i =\u0026gt; ({ value: i, label: i }));\rexport default function App() {\rconst [shape, setShape] = useState(\u0026#39;bar\u0026#39;);\rconst [organic, setOrganic] = useState(\u0026#39;yes\u0026#39;);\rconst [selectedIngredients, setSelectedIngredients] = useState\u0026lt;MultiselectProps[\u0026#39;selectedOptions\u0026#39;]\u0026gt;([]);\rconst [wholeSalePrice, setWholeSalePrice] = useState(\u0026#39;\u0026#39;);\rconst [retailPrice, setRetailPrice] = useState(\u0026#39;\u0026#39;);\rconst [additionalNotes, setAdditionalNotes] = useState(\u0026#39;\u0026#39;);\rreturn (\r\u0026lt;ShellLayout\rcontentType=\u0026#34;form\u0026#34;\rbreadcrumbs={\u0026lt;Breadcrumbs active={{ text: \u0026#39;Create flavor\u0026#39;, href: \u0026#39;/create-flavor/index.html\u0026#39; }} /\u0026gt;}\rnavigation={\u0026lt;Navigation /\u0026gt;}\rtools={\u0026lt;HelpPanel header={\u0026lt;h2\u0026gt;Help panel\u0026lt;/h2\u0026gt;} /\u0026gt;}\r\u0026gt;\r\u0026lt;ContentLayout\rheader={\r\u0026lt;Header\rvariant=\u0026#34;h1\u0026#34;\rdescription=\u0026#34;Create a new flavor by specifying ingredients, quality, and price. On creation a flavor will be tested by the product and marketing team.\u0026#34;\r\u0026gt;\rCreate flavor\r\u0026lt;/Header\u0026gt;\r}\r\u0026gt;\r\u0026lt;form onSubmit={event =\u0026gt; event.preventDefault()}\u0026gt;\r\u0026lt;Form\ractions={\r\u0026lt;SpaceBetween direction=\u0026#34;horizontal\u0026#34; size=\u0026#34;xs\u0026#34;\u0026gt;\r\u0026lt;Button href=\u0026#34;/flavors/index.html\u0026#34; variant=\u0026#34;link\u0026#34;\u0026gt;\rCancel\r\u0026lt;/Button\u0026gt;\r\u0026lt;Button formAction=\u0026#34;submit\u0026#34; variant=\u0026#34;primary\u0026#34;\u0026gt;\rCreate flavor\r\u0026lt;/Button\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r}\r\u0026gt;\r\u0026lt;SpaceBetween size=\u0026#34;l\u0026#34;\u0026gt;\r\u0026lt;Container header={\u0026lt;Header variant=\u0026#34;h2\u0026#34;\u0026gt;Chocolate shape\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;FormField label=\u0026#34;Shape\u0026#34; stretch={true}\u0026gt;\r\u0026lt;Tiles\ritems={[\r{\rvalue: \u0026#39;bar\u0026#39;,\rlabel: \u0026#39;Bar\u0026#39;,\rdescription: \u0026#39;Traditional bar-shaped chocolate\u0026#39;,\r},\r{\rvalue: \u0026#39;praline\u0026#39;,\rlabel: \u0026#39;Pralines\u0026#39;,\rdescription: \u0026#39;Sophisticated and premium-looking chocolate shape\u0026#39;,\r},\r]}\rvalue={shape}\ronChange={e =\u0026gt; setShape(e.detail.value)}\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/Container\u0026gt;\r\u0026lt;Container header={\u0026lt;Header variant=\u0026#34;h2\u0026#34;\u0026gt;Ingredients\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;SpaceBetween direction=\u0026#34;vertical\u0026#34; size=\u0026#34;l\u0026#34;\u0026gt;\r\u0026lt;FormField label=\u0026#34;List of ingredients\u0026#34;\u0026gt;\r\u0026lt;Multiselect\rplaceholder=\u0026#34;Select all ingredients\u0026#34;\rselectedOptions={selectedIngredients}\ronChange={({ detail }) =\u0026gt; setSelectedIngredients(detail.selectedOptions)}\roptions={options}\rdeselectAriaLabel={option =\u0026gt; {\rconst label = option?.value || option?.label;\rreturn label ? `Deselect ${label}` : \u0026#39;no label\u0026#39;;\r}}\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;FormField label=\u0026#34;Organic\u0026#34;\u0026gt;\r\u0026lt;RadioGroup\rvalue={organic}\ronChange={({ detail }) =\u0026gt; setOrganic(detail.value)}\ritems={[\r{ value: \u0026#39;no\u0026#39;, label: \u0026#39;No\u0026#39; },\r{ value: \u0026#39;yes\u0026#39;, label: \u0026#39;Yes\u0026#39; },\r]}\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r\u0026lt;/Container\u0026gt;\r\u0026lt;Container header={\u0026lt;Header variant=\u0026#34;h2\u0026#34;\u0026gt;Marketing\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;FormField label=\u0026#34;Prices\u0026#34; description=\u0026#34;Define the prices for wholesale and retail.\u0026#34;\u0026gt;\r\u0026lt;SpaceBetween direction=\u0026#34;vertical\u0026#34; size=\u0026#34;l\u0026#34;\u0026gt;\r\u0026lt;ColumnLayout columns={2}\u0026gt;\r\u0026lt;FormField label=\u0026#34;Wholesale Price\u0026#34; stretch={true}\u0026gt;\r\u0026lt;Input\rvalue={wholeSalePrice}\ronChange={({ detail }) =\u0026gt; setWholeSalePrice(detail.value)}\rtype=\u0026#34;number\u0026#34;\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;FormField label=\u0026#34;Retail Price\u0026#34; stretch={true}\u0026gt;\r\u0026lt;Input\rvalue={retailPrice}\ronChange={({ detail }) =\u0026gt; setRetailPrice(detail.value)}\rtype=\u0026#34;number\u0026#34;\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/ColumnLayout\u0026gt;\r\u0026lt;FormField\rlabel={\r\u0026lt;\u0026gt;\rAdditional notes\u0026lt;i\u0026gt; - optional\u0026lt;/i\u0026gt;\r\u0026lt;/\u0026gt;\r}\rstretch={true}\r\u0026gt;\r\u0026lt;Textarea onChange={({ detail }) =\u0026gt; setAdditionalNotes(detail.value)} value={additionalNotes} /\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/Container\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r\u0026lt;/Form\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/ContentLayout\u0026gt;\r\u0026lt;/ShellLayout\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/2-basic-layout/2-4-breadcrumd-to-app-layout/",
	"title": "Add the breadcrumb component to the app layout",
	"tags": [],
	"description": "",
	"content": "Similar to how we added the side navigation component to app layout, we\u0026rsquo;re now creating a breadcrumb group component and wiring it up to the app layout component.\nTake a look at the guidance and examples for breadcrumb group . Add the breadcrumb group component on your own using dummy data. Create the component in a separate file (src/pages/home/components/breadcrumbs.tsx) and attach the component to the app layout\u0026rsquo;s breadcrumbs slot.\nHere\u0026rsquo;s what src/pages/home/components/breadcrumbs.tsx looks like:\nimport React from \u0026#39;react\u0026#39;;\rimport BreadcrumbGroup, { BreadcrumbGroupProps } from \u0026#39;@cloudscape-design/components/breadcrumb-group\u0026#39;;\rconst items: BreadcrumbGroupProps.Item[] = [\r{ text: \u0026#39;Chocolate Factory\u0026#39;, href: \u0026#39;/home/index.html\u0026#39; },\r{ text: \u0026#39;Dashboard\u0026#39;, href: \u0026#39;/home/index.html\u0026#39; },\r];\rexport interface BreadcrumbsProps {\ractive: BreadcrumbGroupProps.Item;\r}\rexport default function Breadcrumbs() {\rreturn \u0026lt;BreadcrumbGroup items={items} /\u0026gt;;\r} Next, we provide the Breadcrumbs component to the app layout as we did it with the side navigation in the previous step.\nSee how src/pages/home/app.tsx looks like after this step.\rimport React from \u0026#39;react\u0026#39;;\rimport TopNavigation from \u0026#39;@cloudscape-design/components/top-navigation\u0026#39;;\rimport AppLayout from \u0026#39;@cloudscape-design/components/app-layout\u0026#39;;\rimport Navigation from \u0026#39;./components/navigation\u0026#39;;\rimport Breadcrumbs from \u0026#39;./components/breadcrumbs\u0026#39;;\rimport \u0026#39;./styles.css\u0026#39;;\rexport default function App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;div id=\u0026#34;top-nav\u0026#34;\u0026gt;\r\u0026lt;TopNavigation\ridentity={{\rlogo: { src: \u0026#39;/logo.svg\u0026#39;, alt: \u0026#39;Chocolate Factory Logo\u0026#39; },\rtitle: \u0026#39;Chocolate Factory\u0026#39;,\rhref: \u0026#39;/home/index.html\u0026#39;,\r}}\ri18nStrings={{\roverflowMenuTriggerText: \u0026#39;More\u0026#39;,\roverflowMenuTitleText: \u0026#39;All\u0026#39;,\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;AppLayout\rheaderSelector=\u0026#34;#top-nav\u0026#34;\rariaLabels={{\rnavigation: \u0026#39;Navigation drawer\u0026#39;,\rnavigationClose: \u0026#39;Close navigation drawer\u0026#39;,\rnavigationToggle: \u0026#39;Open navigation drawer\u0026#39;,\rnotifications: \u0026#39;Notifications\u0026#39;,\rtools: \u0026#39;Help panel\u0026#39;,\rtoolsClose: \u0026#39;Close help panel\u0026#39;,\rtoolsToggle: \u0026#39;Open help panel\u0026#39;,\r}}\rbreadcrumbs={\u0026lt;Breadcrumbs /\u0026gt;}\rnavigation={\u0026lt;Navigation /\u0026gt;}\r/\u0026gt;\r\u0026lt;/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/4-creation-flow/",
	"title": "Creation Flow",
	"tags": [],
	"description": "",
	"content": "While viewing resources is important, in a real use case there would not be any resources to view, unless we let users create them. In this step, we\u0026rsquo;ll look at the create resource pattern and then further enhance this code with the form field validation pattern to add new flavors for our chocolate factory.\nHands off from coding. In this step, we\u0026rsquo;ll apply the create resource pattern and then further enhance this code with the form field validation pattern.\nTake 5-10 minutes to familiarize yourself with the two patterns we\u0026rsquo;re working with.\nSee how the app looks before and after this step:\nBefore After "
},
{
	"uri": "//localhost:1313/2-basic-layout/2-5-content-to-app-layout/",
	"title": "Add content to the app layout component",
	"tags": [],
	"description": "",
	"content": "Adding content to the app layout component is done via the content property. Try it out by adding the property to AppLayout and add dummy content to see the basic functionality.\nTo place your content in the high contrast header, you can use the content layout component . This component provides the basic layout for the header and content of a page. Take a look at the API documentation and usage guidelines. You can then add the component to the AppLayout content property with dummy data and see how it looks.\nSee how src/pages/home/app.tsx looks like after this step.\rimport React from \u0026#39;react\u0026#39;;\rimport TopNavigation from \u0026#39;@cloudscape-design/components/top-navigation\u0026#39;;\rimport AppLayout from \u0026#39;@cloudscape-design/components/app-layout\u0026#39;;\rimport Navigation from \u0026#39;./components/navigation\u0026#39;;\rimport Breadcrumbs from \u0026#39;./components/breadcrumbs\u0026#39;;\rimport ContentLayout from \u0026#39;@cloudscape-design/components/content-layout\u0026#39;;\rimport Container from \u0026#39;@cloudscape-design/components/container\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport \u0026#39;./styles.css\u0026#39;;\rexport default function App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;div id=\u0026#34;top-nav\u0026#34;\u0026gt;\r\u0026lt;TopNavigation\ridentity={{\rlogo: { src: \u0026#39;/logo.svg\u0026#39;, alt: \u0026#39;Chocolate Factory Logo\u0026#39; },\rtitle: \u0026#39;Chocolate Factory\u0026#39;,\rhref: \u0026#39;/home/index.html\u0026#39;,\r}}\ri18nStrings={{\roverflowMenuTriggerText: \u0026#39;More\u0026#39;,\roverflowMenuTitleText: \u0026#39;All\u0026#39;,\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;AppLayout\rheaderSelector=\u0026#34;#top-nav\u0026#34;\rariaLabels={{\rnavigation: \u0026#39;Navigation drawer\u0026#39;,\rnavigationClose: \u0026#39;Close navigation drawer\u0026#39;,\rnavigationToggle: \u0026#39;Open navigation drawer\u0026#39;,\rnotifications: \u0026#39;Notifications\u0026#39;,\rtools: \u0026#39;Help panel\u0026#39;,\rtoolsClose: \u0026#39;Close help panel\u0026#39;,\rtoolsToggle: \u0026#39;Open help panel\u0026#39;,\r}}\rnavigation={\u0026lt;Navigation /\u0026gt;}\rbreadcrumbs={\u0026lt;Breadcrumbs /\u0026gt;}\rcontent={\r\u0026lt;ContentLayout header={\u0026lt;Header variant=\u0026#34;h1\u0026#34;\u0026gt;Dashboard\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;Container\u0026gt;Hello World!\u0026lt;/Container\u0026gt;\r\u0026lt;/ContentLayout\u0026gt;\r}\r/\u0026gt;\r\u0026lt;/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-4-pagination-table/",
	"title": "Add pagination to the table",
	"tags": [],
	"description": "",
	"content": "As we\u0026rsquo;ve seen when setting up the collection, there are different variables constructed from the useCollection hook: items, filterProps, filteredItemsCount, paginationProps and collectionProps. In this step, we make use of paginationProps. We can use the paginationProps object to spread on the pagination component. Let\u0026rsquo;s do that by adding the Pagination component as a property to the Table inside src/pages/flavors/components/flavors-table.tsx:\npagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\nTake a look in your browser. The table view now shows 20 items per page and comes with a pagination. Feel free to play around with the newly added elements and default values.\nSee how src/pages/flavors/components/flavors-table.tsx looks like after this step.\rimport React, { useState } from \u0026#39;react\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport Table, { TableProps } from \u0026#39;@cloudscape-design/components/table\u0026#39;;\rimport { useCollection } from \u0026#39;@cloudscape-design/collection-hooks\u0026#39;;\rimport { Flavor } from \u0026#39;../data\u0026#39;;\rimport { CollectionPreferencesProps } from \u0026#39;@cloudscape-design/components\u0026#39;;\rimport Pagination from \u0026#39;@cloudscape-design/components/pagination\u0026#39;;\rconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rminWidth: 180,\r},\r];\rexport interface VariationTableProps {\rflavors: Flavor[];\r}\rexport default function VariationTable({ flavors }: VariationTableProps) {\rconst [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 });\rconst { items, filterProps, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(flavors, {\rfiltering: {},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r});\rreturn (\r\u0026lt;Table\u0026lt;Flavor\u0026gt;\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rvariant=\u0026#34;full-page\u0026#34;\rariaLabels={{\rselectionGroupLabel: \u0026#39;Items selection\u0026#39;,\ritemSelectionLabel: ({ selectedItems }, item) =\u0026gt; {\rconst isItemSelected = selectedItems.filter(i =\u0026gt; i.name === item.name).length;\rreturn `${item.name} is ${isItemSelected ? \u0026#39;\u0026#39; : \u0026#39;not \u0026#39;}selected`;\r},\rtableLabel: \u0026#39;Flavors table\u0026#39;,\r}}\rresizableColumns={true}\rheader={\r\u0026lt;Header variant=\u0026#34;awsui-h1-sticky\u0026#34; counter={`(${flavors.length})`}\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\rpagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\r/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/4-creation-flow/4-4-form-validation/",
	"title": "Apply form field validation pattern",
	"tags": [],
	"description": "",
	"content": "Before we start coding, take a look at the validation pattern which we\u0026rsquo;ll apply in this step. We\u0026rsquo;ll apply field validation to fields that are not labeled as optional. To summarize, we\u0026rsquo;ll validate the data after a user submits a form for the first time. We donâ€™t validate before the user submits the form for the first time. On subsequent attempts, validation is happening as the user completes each field. For showing the error text, we use the FormField component errorText property. If it contains text, it will be shown. If it\u0026rsquo;s empty, nothing will be shown. With that explained, you\u0026rsquo;re ready to go. Give it a try and apply the validation pattern.\nSee how src/pages/create-flavor/app.tsx looks like after this step:\rimport React, { useState } from \u0026#39;react\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport Form from \u0026#39;@cloudscape-design/components/form\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport HelpPanel from \u0026#39;@cloudscape-design/components/help-panel\u0026#39;;\rimport SpaceBetween from \u0026#39;@cloudscape-design/components/space-between\u0026#39;;\rimport ContentLayout from \u0026#39;@cloudscape-design/components/content-layout\u0026#39;;\rimport FormField from \u0026#39;@cloudscape-design/components/form-field\u0026#39;;\rimport Tiles from \u0026#39;@cloudscape-design/components/tiles\u0026#39;;\rimport Container from \u0026#39;@cloudscape-design/components/container\u0026#39;;\rimport Multiselect, { MultiselectProps } from \u0026#39;@cloudscape-design/components/multiselect\u0026#39;;\rimport RadioGroup from \u0026#39;@cloudscape-design/components/radio-group\u0026#39;;\rimport Textarea from \u0026#39;@cloudscape-design/components/textarea\u0026#39;;\rimport ColumnLayout from \u0026#39;@cloudscape-design/components/column-layout\u0026#39;;\rimport Input from \u0026#39;@cloudscape-design/components/input\u0026#39;;\rimport Breadcrumbs from \u0026#39;../../components/breadcrumbs\u0026#39;;\rimport Navigation from \u0026#39;../../components/navigation\u0026#39;;\rimport ShellLayout from \u0026#39;../../layouts/shell\u0026#39;;\rimport { chocolate, fruits } from \u0026#39;../flavors/data\u0026#39;;\rconst options = [...fruits, ...chocolate].map(i =\u0026gt; ({ value: i, label: i }));\rconst isEmptyString = (value: string) =\u0026gt; !value?.length;\rexport default function App() {\rconst [shape, setShape] = useState(\u0026#39;bar\u0026#39;);\rconst [organic, setOrganic] = useState(\u0026#39;yes\u0026#39;);\rconst [selectedIngredients, setSelectedIngredients] = useState\u0026lt;MultiselectProps[\u0026#39;selectedOptions\u0026#39;]\u0026gt;([]);\rconst [wholeSalePrice, setWholeSalePrice] = useState(\u0026#39;\u0026#39;);\rconst [retailPrice, setRetailPrice] = useState(\u0026#39;\u0026#39;);\rconst [additionalNotes, setAdditionalNotes] = useState(\u0026#39;\u0026#39;);\rconst [isFormSubmitted, setIsFormSubmitted] = useState(false);\rreturn (\r\u0026lt;ShellLayout\rcontentType=\u0026#34;form\u0026#34;\rbreadcrumbs={\u0026lt;Breadcrumbs active={{ text: \u0026#39;Create flavor\u0026#39;, href: \u0026#39;/create-flavor/index.html\u0026#39; }} /\u0026gt;}\rnavigation={\u0026lt;Navigation /\u0026gt;}\rtools={\u0026lt;HelpPanel header={\u0026lt;h2\u0026gt;Help panel\u0026lt;/h2\u0026gt;} /\u0026gt;}\r\u0026gt;\r\u0026lt;ContentLayout\rheader={\r\u0026lt;Header\rvariant=\u0026#34;h1\u0026#34;\rdescription=\u0026#34;Create a new flavor by specifying ingredients, quality, and price. On creation a flavor will be tested by the product and marketing team.\u0026#34;\r\u0026gt;\rCreate flavor\r\u0026lt;/Header\u0026gt;\r}\r\u0026gt;\r\u0026lt;form\ronSubmit={event =\u0026gt; {\revent.preventDefault();\rsetIsFormSubmitted(true);\r}}\r\u0026gt;\r\u0026lt;Form\ractions={\r\u0026lt;SpaceBetween direction=\u0026#34;horizontal\u0026#34; size=\u0026#34;xs\u0026#34;\u0026gt;\r\u0026lt;Button href=\u0026#34;/flavors/index.html\u0026#34; variant=\u0026#34;link\u0026#34;\u0026gt;\rCancel\r\u0026lt;/Button\u0026gt;\r\u0026lt;Button formAction=\u0026#34;submit\u0026#34; variant=\u0026#34;primary\u0026#34;\u0026gt;\rCreate flavor\r\u0026lt;/Button\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r}\r\u0026gt;\r\u0026lt;SpaceBetween size=\u0026#34;l\u0026#34;\u0026gt;\r\u0026lt;Container header={\u0026lt;Header variant=\u0026#34;h2\u0026#34;\u0026gt;Chocolate shape\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;FormField label=\u0026#34;Shape\u0026#34; stretch={true}\u0026gt;\r\u0026lt;Tiles\ritems={[\r{\rvalue: \u0026#39;bar\u0026#39;,\rlabel: \u0026#39;Bar\u0026#39;,\rdescription: \u0026#39;Traditional bar-shaped chocolate\u0026#39;,\r},\r{\rvalue: \u0026#39;praline\u0026#39;,\rlabel: \u0026#39;Pralines\u0026#39;,\rdescription: \u0026#39;Sophisticated and premium-looking chocolate shape\u0026#39;,\r},\r]}\rvalue={shape}\ronChange={e =\u0026gt; setShape(e.detail.value)}\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/Container\u0026gt;\r\u0026lt;Container header={\u0026lt;Header variant=\u0026#34;h2\u0026#34;\u0026gt;Ingredients\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;SpaceBetween direction=\u0026#34;vertical\u0026#34; size=\u0026#34;l\u0026#34;\u0026gt;\r\u0026lt;FormField\rlabel=\u0026#34;List of ingredients\u0026#34;\rerrorText={\risFormSubmitted \u0026amp;\u0026amp; selectedIngredients.length === 0 \u0026amp;\u0026amp; \u0026#39;List of ingredients is required.\u0026#39;\r}\ri18nStrings={{\rerrorIconAriaLabel: \u0026#39;Error\u0026#39;,\r}}\r\u0026gt;\r\u0026lt;Multiselect\rplaceholder=\u0026#34;Select all ingredients\u0026#34;\rselectedOptions={selectedIngredients}\ronChange={({ detail }) =\u0026gt; setSelectedIngredients(detail.selectedOptions)}\roptions={options}\rdeselectAriaLabel={option =\u0026gt; {\rconst label = option?.value || option?.label;\rreturn label ? `Deselect ${label}` : \u0026#39;no label\u0026#39;;\r}}\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;FormField label=\u0026#34;Organic\u0026#34;\u0026gt;\r\u0026lt;RadioGroup\rvalue={organic}\ronChange={({ detail }) =\u0026gt; setOrganic(detail.value)}\ritems={[\r{ value: \u0026#39;no\u0026#39;, label: \u0026#39;No\u0026#39; },\r{ value: \u0026#39;yes\u0026#39;, label: \u0026#39;Yes\u0026#39; },\r]}\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r\u0026lt;/Container\u0026gt;\r\u0026lt;Container header={\u0026lt;Header variant=\u0026#34;h2\u0026#34;\u0026gt;Marketing\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;FormField label=\u0026#34;Prices\u0026#34; description=\u0026#34;Define the prices for wholesale and retail.\u0026#34;\u0026gt;\r\u0026lt;SpaceBetween direction=\u0026#34;vertical\u0026#34; size=\u0026#34;l\u0026#34;\u0026gt;\r\u0026lt;ColumnLayout columns={2}\u0026gt;\r\u0026lt;FormField\rlabel=\u0026#34;Wholesale price\u0026#34;\rstretch={true}\rerrorText={isFormSubmitted \u0026amp;\u0026amp; isEmptyString(wholeSalePrice) \u0026amp;\u0026amp; \u0026#39;Wholesale Price is required.\u0026#39;}\ri18nStrings={{\rerrorIconAriaLabel: \u0026#39;Error\u0026#39;,\r}}\r\u0026gt;\r\u0026lt;Input\rvalue={wholeSalePrice}\ronChange={({ detail }) =\u0026gt; setWholeSalePrice(detail.value)}\rtype=\u0026#34;number\u0026#34;\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;FormField\rlabel=\u0026#34;Retail price\u0026#34;\rstretch={true}\rerrorText={isFormSubmitted \u0026amp;\u0026amp; isEmptyString(retailPrice) \u0026amp;\u0026amp; \u0026#39;Retail Price is required.\u0026#39;}\ri18nStrings={{\rerrorIconAriaLabel: \u0026#39;Error\u0026#39;,\r}}\r\u0026gt;\r\u0026lt;Input\rvalue={retailPrice}\ronChange={({ detail }) =\u0026gt; setRetailPrice(detail.value)}\rtype=\u0026#34;number\u0026#34;\r/\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/ColumnLayout\u0026gt;\r\u0026lt;FormField\rlabel={\r\u0026lt;\u0026gt;\rAdditional notes\u0026lt;i\u0026gt; - optional\u0026lt;/i\u0026gt;\r\u0026lt;/\u0026gt;\r}\rstretch={true}\r\u0026gt;\r\u0026lt;Textarea onChange={({ detail }) =\u0026gt; setAdditionalNotes(detail.value)} value={additionalNotes} /\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r\u0026lt;/FormField\u0026gt;\r\u0026lt;/Container\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r\u0026lt;/Form\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/ContentLayout\u0026gt;\r\u0026lt;/ShellLayout\u0026gt;\r);\r} Take a look at the form page in your browser and test your implementation of the form field validation pattern.\nSee the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/wrapping-up/",
	"title": "Wrapping up",
	"tags": [],
	"description": "",
	"content": "Congratulations! Youâ€™ve created a chocolate factory application game that applies multiple Cloudscape patterns and components.\nNice work! We hope you now feel like you have a decent grasp of how Cloudscape works.\nIf you have extra time or want to practice your new Cloudscape skills, here are some ideas for improvements that you could make to the Chocolate Factory application:\nSet up and add unit tests to your application by following the testing guidance. Set up and add integration tests to your application by following the testing guidance. Communicate to users that unsaved changes on the form page will be discarded when users leave a page. Help users to easily and quickly access help within the interface and current workflow on the form page by applying the help system pattern. Create a detail view when selecting a Flavor in the Table view by applying the resource details pattern. To get more inspiration on what can be done, check out the Cloudscape demo pages and explore the source code. Clean up If you want to clean up the files created during the workshop, navigate to the workshop repository folder and delete it.\n"
},
{
	"uri": "//localhost:1313/4-creation-flow/4-5-dark-compact-mode/",
	"title": "Apply form field validation pattern",
	"tags": [],
	"description": "",
	"content": "Cloudscape supports: Visual modes used to optimize the user interface based on environmental conditions and user preferences. We support light and dark modes. Density modes used to optimize data density. We support comfortable and compact modes. Open the developer tools built into your browser and: Toggle dark and light modes by executing the following command in the console\ndocument.body.classList.toggle(\u0026#39;awsui-dark-mode\u0026#39;) Toggle compact and comfortable modes by executing the following command in the console\ndocument.body.classList.toggle(\u0026#39;awsui-compact-mode\u0026#39;) See the screenshot of how the page looks like in the different modes.\rDark mode Compact mode Light mode "
},
{
	"uri": "//localhost:1313/2-basic-layout/2-6-explore-component-dashboard/",
	"title": "Explore components for dashboard",
	"tags": [],
	"description": "",
	"content": "We\u0026rsquo;ve added predefined content for the dashboard page (we won\u0026rsquo;t cover this in detail) inside src/pages/home/components/prepared-dashboard-content.tsx. Import this component in the app by using import PreparedDashboardContent from './components/prepared-dashboard-content'; and add the component as a child of the ContentLayout component. After that, take a look in your browser to explore the different components.\n// AppLayout\u0026#39;s content property:\rcontent={\r\u0026lt;ContentLayout header={\u0026lt;Header variant=\u0026#34;h1\u0026#34;\u0026gt;Dashboard\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;PreparedDashboardContent /\u0026gt;\r\u0026lt;/ContentLayout\u0026gt;\r} See how src/pages/home/app.tsx looks like after this step.\rimport React from \u0026#39;react\u0026#39;;\rimport TopNavigation from \u0026#39;@cloudscape-design/components/top-navigation\u0026#39;;\rimport AppLayout from \u0026#39;@cloudscape-design/components/app-layout\u0026#39;;\rimport Navigation from \u0026#39;./components/navigation\u0026#39;;\rimport Breadcrumbs from \u0026#39;./components/breadcrumbs\u0026#39;;\rimport ContentLayout from \u0026#39;@cloudscape-design/components/content-layout\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport PreparedDashboardContent from \u0026#39;./components/prepared-dashboard-content\u0026#39;;\rimport \u0026#39;./styles.css\u0026#39;;\rexport default function App() {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;div id=\u0026#34;top-nav\u0026#34;\u0026gt;\r\u0026lt;TopNavigation\ridentity={{\rlogo: { src: \u0026#39;/logo.svg\u0026#39;, alt: \u0026#39;Chocolate Factory Logo\u0026#39; },\rtitle: \u0026#39;Chocolate Factory\u0026#39;,\rhref: \u0026#39;/home/index.html\u0026#39;,\r}}\ri18nStrings={{\roverflowMenuTriggerText: \u0026#39;More\u0026#39;,\roverflowMenuTitleText: \u0026#39;All\u0026#39;,\r}}\r/\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;AppLayout\rheaderSelector=\u0026#34;#top-nav\u0026#34;\rariaLabels={{\rnavigation: \u0026#39;Navigation drawer\u0026#39;,\rnavigationClose: \u0026#39;Close navigation drawer\u0026#39;,\rnavigationToggle: \u0026#39;Open navigation drawer\u0026#39;,\rnotifications: \u0026#39;Notifications\u0026#39;,\rtools: \u0026#39;Help panel\u0026#39;,\rtoolsClose: \u0026#39;Close help panel\u0026#39;,\rtoolsToggle: \u0026#39;Open help panel\u0026#39;,\r}}\rnavigation={\u0026lt;Navigation /\u0026gt;}\rbreadcrumbs={\u0026lt;Breadcrumbs /\u0026gt;}\rcontent={\r\u0026lt;ContentLayout header={\u0026lt;Header variant=\u0026#34;h1\u0026#34;\u0026gt;Dashboard\u0026lt;/Header\u0026gt;}\u0026gt;\r\u0026lt;PreparedDashboardContent /\u0026gt;\r\u0026lt;/ContentLayout\u0026gt;\r}\r/\u0026gt;\r\u0026lt;/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-5-make-table-sortable/",
	"title": "Make the table sortable",
	"tags": [],
	"description": "",
	"content": "You might have noticed the sorting configuration in the step where we set up the collection hooks. This configuration sets the initial sorting state on the first render. To make the columns sortable, we need to extend the columnDefinitions by the sortingField field for each column. The value is used in collection hooks to reorder the items. Provide the name of the property within each item that should be used for sorting by this column.\nHere\u0026rsquo;s the extended columnDefinitions definition:\nconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rsortingField: \u0026#39;name\u0026#39;,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rsortingField: \u0026#39;sold\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rsortingField: \u0026#39;produced\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rsortingField: \u0026#39;estimated\u0026#39;,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rsortingField: \u0026#39;retailPrice\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rsortingField: \u0026#39;totalRevenue\u0026#39;,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rsortingField: \u0026#39;totalCost\u0026#39;,\rminWidth: 180,\r},\r]; To reflect sorting on the table, we need to spread the collectionProps on the Table component. It contains the different properties that are needed to reflect sorting (sortingColumn, sortingDescending, onSortingChange) among other properties in the user interface (UI). Let\u0026rsquo;s spread the collectionProps on the Table:\n\u0026lt;Table\u0026lt;Flavor\u0026gt;\r{...collectionProps}\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rresizableColumns={true}\rvariant=\u0026#34;full-page\u0026#34;\rheader={\r\u0026lt;Header variant=\u0026#34;awsui-h1-sticky\u0026#34; counter={`(${flavors.length})`}\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\rpagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\r/\u0026gt;; You can now see sorting on the different columns reflected in the browser.\nSee how src/pages/flavors/components/flavors-table.tsx looks like after this step.\rimport React, { useState } from \u0026#39;react\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport Table, { TableProps } from \u0026#39;@cloudscape-design/components/table\u0026#39;;\rimport { useCollection } from \u0026#39;@cloudscape-design/collection-hooks\u0026#39;;\rimport { Flavor } from \u0026#39;../data\u0026#39;;\rimport { CollectionPreferencesProps } from \u0026#39;@cloudscape-design/components\u0026#39;;\rimport Pagination from \u0026#39;@cloudscape-design/components/pagination\u0026#39;;\rconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rsortingField: \u0026#39;name\u0026#39;,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rsortingField: \u0026#39;sold\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rsortingField: \u0026#39;produced\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rsortingField: \u0026#39;estimated\u0026#39;,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rsortingField: \u0026#39;retailPrice\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rsortingField: \u0026#39;totalRevenue\u0026#39;,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rsortingField: \u0026#39;totalCost\u0026#39;,\rminWidth: 180,\r},\r];\rexport interface VariationTableProps {\rflavors: Flavor[];\r}\rexport default function VariationTable({ flavors }: VariationTableProps) {\rconst [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 });\rconst { items, filterProps, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(flavors, {\rfiltering: {},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r});\rreturn (\r\u0026lt;Table\u0026lt;Flavor\u0026gt;\r{...collectionProps}\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rvariant=\u0026#34;full-page\u0026#34;\rariaLabels={{\rselectionGroupLabel: \u0026#39;Items selection\u0026#39;,\ritemSelectionLabel: ({ selectedItems }, item) =\u0026gt; {\rconst isItemSelected = selectedItems.filter(i =\u0026gt; i.name === item.name).length;\rreturn `${item.name} is ${isItemSelected ? \u0026#39;\u0026#39; : \u0026#39;not \u0026#39;}selected`;\r},\rtableLabel: \u0026#39;Flavors table\u0026#39;,\r}}\rresizableColumns={true}\rheader={\r\u0026lt;Header variant=\u0026#34;awsui-h1-sticky\u0026#34; counter={`(${flavors.length})`}\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\rpagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\r/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-6-text-filer-table/",
	"title": "Add a text filter to the table",
	"tags": [],
	"description": "",
	"content": "Searching for names manually in this amount of data is time-consuming. Let\u0026rsquo;s fix that by adding a text filter to the table. We do this through the table component\u0026rsquo;s filter property. We add the text filter component to the table and wire it with the collection hooks\u0026rsquo; filterProps. In addition, we set the filteringPlaceholder and the countText property. The filteringPlaceholder is used as placeholder for the filtering input and the countText is a human-readable, localized string that indicates the number of results.\nBy adding text filter component, we introduce a new state on the table. What do we display if there aren\u0026rsquo;t any matches? Remember the table view pattern you looked at when we started step 2? Right, it mentions the empty state pattern. Take a few minutes and make yourself familiar. We\u0026rsquo;ll use this pattern with a slightly different wording to reflect the noMatch state, which is displayed when the filtering operation doesn\u0026rsquo;t return any matches.\nTo add this pattern, let\u0026rsquo;s create a custom component in src/pages/flavors/components/flavors-table.tsx which builds the UI:\n// Add the Box to your imports at the top of the file\rimport Box from \u0026#39;@cloudscape-design/components/box\u0026#39;;\rconst EmptyState = ({ title, subtitle, action }: { title: string; subtitle: string; action: ReactNode }) =\u0026gt; {\rreturn (\r\u0026lt;Box textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r\u0026lt;Box variant=\u0026#34;strong\u0026#34; textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r{title}\r\u0026lt;/Box\u0026gt;\r\u0026lt;Box variant=\u0026#34;p\u0026#34; padding={{ bottom: \u0026#39;s\u0026#39; }} color=\u0026#34;inherit\u0026#34;\u0026gt;\r{subtitle}\r\u0026lt;/Box\u0026gt;\r{action}\r\u0026lt;/Box\u0026gt;\r);\r}; Now you set the noMatch property inside collection hooks preferences and add the actions variable to the destructuring assignment:\nconst { items, filterProps, actions, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(\rflavors,\r{\rfiltering: {\rnoMatch: (\r\u0026lt;EmptyState\rtitle=\u0026#34;No matches\u0026#34;\rsubtitle=\u0026#34;We canâ€™t find a match.\u0026#34;\raction={\u0026lt;Button onClick={() =\u0026gt; actions.setFiltering(\u0026#39;\u0026#39;)}\u0026gt;Clear filter\u0026lt;/Button\u0026gt;}\r/\u0026gt;\r),\r},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r}\r); Take a look in your browser and search for anything that doesn\u0026rsquo;t exist in the table to see the empty state reflected. For more details about additional filtering settings, refer to the collection hooks API documentation.\nSee how src/pages/flavors/components/flavors-table.tsx looks like after this step.\rimport React, { useState, ReactNode } from \u0026#39;react\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport Table, { TableProps } from \u0026#39;@cloudscape-design/components/table\u0026#39;;\rimport { useCollection } from \u0026#39;@cloudscape-design/collection-hooks\u0026#39;;\rimport { Flavor } from \u0026#39;../data\u0026#39;;\rimport { CollectionPreferencesProps } from \u0026#39;@cloudscape-design/components\u0026#39;;\rimport Pagination from \u0026#39;@cloudscape-design/components/pagination\u0026#39;;\rimport Box from \u0026#39;@cloudscape-design/components/box\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport TextFilter from \u0026#39;@cloudscape-design/components/text-filter\u0026#39;;\rconst getFilterCounterText = (count: number = 0) =\u0026gt; `${count} ${count === 1 ? \u0026#39;match\u0026#39; : \u0026#39;matches\u0026#39;}`;\rconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rsortingField: \u0026#39;name\u0026#39;,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rsortingField: \u0026#39;sold\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rsortingField: \u0026#39;produced\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rsortingField: \u0026#39;estimated\u0026#39;,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rsortingField: \u0026#39;retailPrice\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rsortingField: \u0026#39;totalRevenue\u0026#39;,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rsortingField: \u0026#39;totalCost\u0026#39;,\rminWidth: 180,\r},\r];\rconst EmptyState = ({ title, subtitle, action }: { title: string; subtitle: string; action: ReactNode }) =\u0026gt; {\rreturn (\r\u0026lt;Box textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r\u0026lt;Box variant=\u0026#34;strong\u0026#34; textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r{title}\r\u0026lt;/Box\u0026gt;\r\u0026lt;Box variant=\u0026#34;p\u0026#34; padding={{ bottom: \u0026#39;s\u0026#39; }} color=\u0026#34;inherit\u0026#34;\u0026gt;\r{subtitle}\r\u0026lt;/Box\u0026gt;\r{action}\r\u0026lt;/Box\u0026gt;\r);\r};\rexport interface VariationTableProps {\rflavors: Flavor[];\r}\rexport default function VariationTable({ flavors }: VariationTableProps) {\rconst [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 });\rconst { items, filterProps, actions, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(\rflavors,\r{\rfiltering: {\rnoMatch: (\r\u0026lt;EmptyState\rtitle=\u0026#34;No matches\u0026#34;\rsubtitle=\u0026#34;We canâ€™t find a match.\u0026#34;\raction={\u0026lt;Button onClick={() =\u0026gt; actions.setFiltering(\u0026#39;\u0026#39;)}\u0026gt;Clear filter\u0026lt;/Button\u0026gt;}\r/\u0026gt;\r),\r},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r}\r);\rreturn (\r\u0026lt;Table\u0026lt;Flavor\u0026gt;\r{...collectionProps}\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rvariant=\u0026#34;full-page\u0026#34;\rariaLabels={{\rselectionGroupLabel: \u0026#39;Items selection\u0026#39;,\ritemSelectionLabel: ({ selectedItems }, item) =\u0026gt; {\rconst isItemSelected = selectedItems.filter(i =\u0026gt; i.name === item.name).length;\rreturn `${item.name} is ${isItemSelected ? \u0026#39;\u0026#39; : \u0026#39;not \u0026#39;}selected`;\r},\rtableLabel: \u0026#39;Flavors table\u0026#39;,\r}}\rresizableColumns={true}\rheader={\r\u0026lt;Header variant=\u0026#34;awsui-h1-sticky\u0026#34; counter={`(${flavors.length})`}\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\rpagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\rfilter={\r\u0026lt;TextFilter\r{...filterProps}\rfilteringPlaceholder=\u0026#34;Find flavors\u0026#34;\rcountText={getFilterCounterText(filteredItemsCount)}\r/\u0026gt;\r}\r/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\rApply the empty state pattern (optional) Now it\u0026rsquo;s up to you, add the empty state to the table. Hint: it\u0026rsquo;s part of the collection hooks filter setting. You can find an example in the collection hooks documentation.\nYou can test it by setting the allItems property of the useCollection hook to an empty array.\nSee how src/pages/flavors/components/flavors-table.tsx looks like after this step.\rimport React, { useState, ReactNode } from \u0026#39;react\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport Table, { TableProps } from \u0026#39;@cloudscape-design/components/table\u0026#39;;\rimport { useCollection } from \u0026#39;@cloudscape-design/collection-hooks\u0026#39;;\rimport { Flavor } from \u0026#39;../data\u0026#39;;\rimport { CollectionPreferencesProps } from \u0026#39;@cloudscape-design/components\u0026#39;;\rimport Pagination from \u0026#39;@cloudscape-design/components/pagination\u0026#39;;\rimport Box from \u0026#39;@cloudscape-design/components/box\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport TextFilter from \u0026#39;@cloudscape-design/components/text-filter\u0026#39;;\rconst getFilterCounterText = (count: number = 0) =\u0026gt; `${count} ${count === 1 ? \u0026#39;match\u0026#39; : \u0026#39;matches\u0026#39;}`;\rconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rsortingField: \u0026#39;name\u0026#39;,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rsortingField: \u0026#39;sold\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rsortingField: \u0026#39;produced\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rsortingField: \u0026#39;estimated\u0026#39;,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rsortingField: \u0026#39;retailPrice\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rsortingField: \u0026#39;totalRevenue\u0026#39;,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rsortingField: \u0026#39;totalCost\u0026#39;,\rminWidth: 180,\r},\r];\rconst EmptyState = ({ title, subtitle, action }: { title: string; subtitle: string; action: ReactNode }) =\u0026gt; {\rreturn (\r\u0026lt;Box textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r\u0026lt;Box variant=\u0026#34;strong\u0026#34; textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r{title}\r\u0026lt;/Box\u0026gt;\r\u0026lt;Box variant=\u0026#34;p\u0026#34; padding={{ bottom: \u0026#39;s\u0026#39; }} color=\u0026#34;inherit\u0026#34;\u0026gt;\r{subtitle}\r\u0026lt;/Box\u0026gt;\r{action}\r\u0026lt;/Box\u0026gt;\r);\r};\rexport interface VariationTableProps {\rflavors: Flavor[];\r}\rexport default function VariationTable({ flavors }: VariationTableProps) {\rconst [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 });\rconst { items, filterProps, actions, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(\rflavors,\r{\rfiltering: {\rnoMatch: (\r\u0026lt;EmptyState\rtitle=\u0026#34;No matches\u0026#34;\rsubtitle=\u0026#34;We canâ€™t find a match.\u0026#34;\raction={\u0026lt;Button onClick={() =\u0026gt; actions.setFiltering(\u0026#39;\u0026#39;)}\u0026gt;Clear filter\u0026lt;/Button\u0026gt;}\r/\u0026gt;\r),\rempty: (\r\u0026lt;EmptyState title=\u0026#34;No flavors\u0026#34; subtitle=\u0026#34;No flavors to display.\u0026#34; action={\u0026lt;Button\u0026gt;Create flavor\u0026lt;/Button\u0026gt;} /\u0026gt;\r),\r},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r}\r);\rreturn (\r\u0026lt;Table\u0026lt;Flavor\u0026gt;\r{...collectionProps}\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rvariant=\u0026#34;full-page\u0026#34;\rariaLabels={{\rselectionGroupLabel: \u0026#39;Items selection\u0026#39;,\ritemSelectionLabel: ({ selectedItems }, item) =\u0026gt; {\rconst isItemSelected = selectedItems.filter(i =\u0026gt; i.name === item.name).length;\rreturn `${item.name} is ${isItemSelected ? \u0026#39;\u0026#39; : \u0026#39;not \u0026#39;}selected`;\r},\rtableLabel: \u0026#39;Flavors table\u0026#39;,\r}}\rresizableColumns={true}\rheader={\r\u0026lt;Header variant=\u0026#34;awsui-h1-sticky\u0026#34; counter={`(${flavors.length})`}\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\rpagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\rfilter={\r\u0026lt;TextFilter\r{...filterProps}\rfilteringPlaceholder=\u0026#34;Find flavors\u0026#34;\rcountText={getFilterCounterText(filteredItemsCount)}\r/\u0026gt;\r}\r/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/2-basic-layout/2-7-explore-top-nav-component/",
	"title": "Exploring the top navigation component (optional)",
	"tags": [],
	"description": "",
	"content": "Now you can add a context menu to the TopNavigation. Use the component\u0026rsquo;s documentation page as reference and add a context menu with dummy elements to it. Once you\u0026rsquo;ve done that, take the opportunity to explore the different variants in action.\n"
},
{
	"uri": "//localhost:1313/4-creation-flow/step-summary/",
	"title": "Step summary",
	"tags": [],
	"description": "",
	"content": "In this step, we applied the view resources pattern and used various components to visualize and organize our data. Here\u0026rsquo;s a summary of the tasks in this step:\nAdd the form component. Add various form controls components. Add the form field validation pattern to the form. Here\u0026rsquo;s a screenshot of how the result should look after this step: See the final version of this step by checking out the step-3-completed branch:\nIf you have local changes, stash them by using git stash or force the check out by adding the -f option to the checkout command.\ngit checkout step-3-completed "
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-7-collection-preferences-table/",
	"title": "Add collection preferences to table ",
	"tags": [],
	"description": "",
	"content": "With collection preferences, users can manage their display preferences within a collection. In this step, we let the user choose how many items are shown per page. Before adding the code, take a look at the collection preferences component documentation.\nWe\u0026rsquo;ll add the CollectionPreferences component. Set it as a preferences property value on our flavors Table. Here\u0026rsquo;s the component after we add it to the preferences property:\n\u0026lt;CollectionPreferences\rpreferences={preferences} // Specifies the current preference values\rpageSizePreference={{\r// Configures the built-in \u0026#34;page size selection\u0026#34; preference\r//\rtitle: \u0026#39;Select page size\u0026#39;,\roptions: [\r{ value: 10, label: \u0026#39;10 resources\u0026#39; },\r{ value: 20, label: \u0026#39;20 resources\u0026#39; },\r{ value: 50, label: \u0026#39;50 resources\u0026#39; },\r{ value: 100, label: \u0026#39;100 resources\u0026#39; },\r],\r}}\ronConfirm={({ detail }) =\u0026gt; setPreferences(detail)} // Called when the user confirms a preference change using the confirm button in the modal footer.\rtitle=\u0026#34;Preferences\u0026#34; // Specifies the title of the preferences modal dialog.\rconfirmLabel=\u0026#34;Confirm\u0026#34; // Label of the confirm button in the modal footer.\rcancelLabel=\u0026#34;Cancel\u0026#34; // Label of the cancel button in the modal footer.\r/\u0026gt; Take a look in your browser. You\u0026rsquo;ll now see the settings icon next to the table pagination. Play around with it by setting different values and see how they get reflected in the UI.\nSee how src/pages/flavors/components/flavors-table.tsx looks like after this step.\rimport React, { useState, ReactNode } from \u0026#39;react\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport Table, { TableProps } from \u0026#39;@cloudscape-design/components/table\u0026#39;;\rimport { useCollection } from \u0026#39;@cloudscape-design/collection-hooks\u0026#39;;\rimport { Flavor } from \u0026#39;../data\u0026#39;;\rimport { CollectionPreferencesProps } from \u0026#39;@cloudscape-design/components\u0026#39;;\rimport Pagination from \u0026#39;@cloudscape-design/components/pagination\u0026#39;;\rimport Box from \u0026#39;@cloudscape-design/components/box\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport TextFilter from \u0026#39;@cloudscape-design/components/text-filter\u0026#39;;\rimport CollectionPreferences from \u0026#39;@cloudscape-design/components/collection-preferences\u0026#39;;\rconst getFilterCounterText = (count: number = 0) =\u0026gt; `${count} ${count === 1 ? \u0026#39;match\u0026#39; : \u0026#39;matches\u0026#39;}`;\rconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rsortingField: \u0026#39;name\u0026#39;,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rsortingField: \u0026#39;sold\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rsortingField: \u0026#39;produced\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rsortingField: \u0026#39;estimated\u0026#39;,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rsortingField: \u0026#39;retailPrice\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rsortingField: \u0026#39;totalRevenue\u0026#39;,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rsortingField: \u0026#39;totalCost\u0026#39;,\rminWidth: 180,\r},\r];\rconst EmptyState = ({ title, subtitle, action }: { title: string; subtitle: string; action: ReactNode }) =\u0026gt; {\rreturn (\r\u0026lt;Box textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r\u0026lt;Box variant=\u0026#34;strong\u0026#34; textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r{title}\r\u0026lt;/Box\u0026gt;\r\u0026lt;Box variant=\u0026#34;p\u0026#34; padding={{ bottom: \u0026#39;s\u0026#39; }} color=\u0026#34;inherit\u0026#34;\u0026gt;\r{subtitle}\r\u0026lt;/Box\u0026gt;\r{action}\r\u0026lt;/Box\u0026gt;\r);\r};\rexport interface VariationTableProps {\rflavors: Flavor[];\r}\rexport default function VariationTable({ flavors }: VariationTableProps) {\rconst [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 });\rconst { items, filterProps, actions, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(\rflavors,\r{\rfiltering: {\rnoMatch: (\r\u0026lt;EmptyState\rtitle=\u0026#34;No matches\u0026#34;\rsubtitle=\u0026#34;We canâ€™t find a match.\u0026#34;\raction={\u0026lt;Button onClick={() =\u0026gt; actions.setFiltering(\u0026#39;\u0026#39;)}\u0026gt;Clear filter\u0026lt;/Button\u0026gt;}\r/\u0026gt;\r),\rempty: (\r\u0026lt;EmptyState title=\u0026#34;No flavors\u0026#34; subtitle=\u0026#34;No flavors to display.\u0026#34; action={\u0026lt;Button\u0026gt;Create flavor\u0026lt;/Button\u0026gt;} /\u0026gt;\r),\r},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r}\r);\rreturn (\r\u0026lt;Table\u0026lt;Flavor\u0026gt;\r{...collectionProps}\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rvariant=\u0026#34;full-page\u0026#34;\rariaLabels={{\rselectionGroupLabel: \u0026#39;Items selection\u0026#39;,\ritemSelectionLabel: ({ selectedItems }, item) =\u0026gt; {\rconst isItemSelected = selectedItems.filter(i =\u0026gt; i.name === item.name).length;\rreturn `${item.name} is ${isItemSelected ? \u0026#39;\u0026#39; : \u0026#39;not \u0026#39;}selected`;\r},\rtableLabel: \u0026#39;Flavors table\u0026#39;,\r}}\rresizableColumns={true}\rheader={\r\u0026lt;Header variant=\u0026#34;awsui-h1-sticky\u0026#34; counter={`(${flavors.length})`}\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\rpagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\rfilter={\r\u0026lt;TextFilter\r{...filterProps}\rfilteringPlaceholder=\u0026#34;Find flavors\u0026#34;\rcountText={getFilterCounterText(filteredItemsCount)}\r/\u0026gt;\r}\rpreferences={\r\u0026lt;CollectionPreferences\rpreferences={preferences} // Specifies the current preference values\rpageSizePreference={{\r// Configures the built-in \u0026#34;page size selection\u0026#34; preference\rtitle: \u0026#39;Select page size\u0026#39;,\roptions: [\r{ value: 10, label: \u0026#39;10 resources\u0026#39; },\r{ value: 20, label: \u0026#39;20 resources\u0026#39; },\r{ value: 50, label: \u0026#39;50 resources\u0026#39; },\r{ value: 100, label: \u0026#39;100 resources\u0026#39; },\r],\r}}\ronConfirm={({ detail }) =\u0026gt; setPreferences(detail)} // Called when the user confirms a preference change using the confirm button in the modal footer.\rtitle=\u0026#34;Preferences\u0026#34; // Specifies the title of the preferences modal dialog.\rconfirmLabel=\u0026#34;Confirm\u0026#34; // Label of the confirm button in the modal footer.\rcancelLabel=\u0026#34;Cancel\u0026#34; // Label of the cancel button in the modal footer.\r/\u0026gt;\r}\r/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/2-basic-layout/2-8-help-panel-content/",
	"title": "Add help panel content (optional)",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s time to add content to the app layout\u0026rsquo;s tools panel. Take a look at the help panel component documentation and usage guidelines and try to add it to AppLayout component tools.\n"
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-8-rows-selectable/",
	"title": "Make table rows selectable",
	"tags": [],
	"description": "",
	"content": "To allow users to take an action on the items in the collection, you can enable the selection functionality. The table component comes with different selection types: none (default), single (allows a single item to be selected using a radio button in the table row) and multi (allows multiple items to be selected at a time using check boxes for each item). To make use of the single selection type, we need to do the following:\nInclude the number of selected items in the header resource counter. Add actions to the Table. We\u0026rsquo;ll add two buttons: a \u0026ldquo;Create flavor\u0026rdquo; button and an \u0026ldquo;Edit\u0026rdquo; button, which is enabled if a user has selected an item in the table. The Edit button redirects to the edit page in this read-only example. Feel free to adapt it when using it in your full interactive application. Let\u0026rsquo;s start enabling selection by adding the selectionType=\u0026quot;single property to the table. When viewing the application in your browser, you\u0026rsquo;ll see radio buttons in each row.\nNext, we\u0026rsquo;ll extend the table header to indicate the selection in the header. For getting the header counter text, we\u0026rsquo;ll make use of this helper outside the table:\nconst getHeaderCounterText = (items: readonly Flavor[] = [], selectedItems: readonly Flavor[] = []) =\u0026gt; {\rreturn selectedItems \u0026amp;\u0026amp; selectedItems.length \u0026gt; 0 ? `(${selectedItems.length}/${items.length})` : `(${items.length})`;\r}; Here\u0026rsquo;s the updated Table header property. As you can see, we enable the Edit button only if a row is selected.\n\u0026lt;Header\rvariant=\u0026#34;awsui-h1-sticky\u0026#34;\rcounter={getHeaderCounterText(flavors, collectionProps.selectedItems)}\ractions={\r\u0026lt;SpaceBetween size=\u0026#34;s\u0026#34; direction=\u0026#34;horizontal\u0026#34;\u0026gt;\r\u0026lt;Button disabled={collectionProps.selectedItems?.length === 0}\u0026gt;Edit\u0026lt;/Button\u0026gt;\r\u0026lt;Button href=\u0026#34;/create-flavor/index.html\u0026#34; variant=\u0026#34;primary\u0026#34;\u0026gt;\rCreate flavor\r\u0026lt;/Button\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r}\r\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt; Take a look in your browser and try out the recently added selection functionality. You\u0026rsquo;ll see that when selecting a row, it gets reset across pagination, sorting, filtering, and page size changes. This is to prevent users from performing actions on items they might not know are selected.\nSee how src/pages/flavors/components/flavors-table.tsx looks like after this step.\rimport React, { useState, ReactNode } from \u0026#39;react\u0026#39;;\rimport Header from \u0026#39;@cloudscape-design/components/header\u0026#39;;\rimport Table, { TableProps } from \u0026#39;@cloudscape-design/components/table\u0026#39;;\rimport { useCollection } from \u0026#39;@cloudscape-design/collection-hooks\u0026#39;;\rimport { Flavor } from \u0026#39;../data\u0026#39;;\rimport { CollectionPreferencesProps } from \u0026#39;@cloudscape-design/components\u0026#39;;\rimport Pagination from \u0026#39;@cloudscape-design/components/pagination\u0026#39;;\rimport Box from \u0026#39;@cloudscape-design/components/box\u0026#39;;\rimport Button from \u0026#39;@cloudscape-design/components/button\u0026#39;;\rimport TextFilter from \u0026#39;@cloudscape-design/components/text-filter\u0026#39;;\rimport CollectionPreferences from \u0026#39;@cloudscape-design/components/collection-preferences\u0026#39;;\rimport SpaceBetween from \u0026#39;@cloudscape-design/components/space-between\u0026#39;;\rconst getFilterCounterText = (count: number = 0) =\u0026gt; `${count} ${count === 1 ? \u0026#39;match\u0026#39; : \u0026#39;matches\u0026#39;}`;\rconst columnDefinitions: TableProps\u0026lt;Flavor\u0026gt;[\u0026#39;columnDefinitions\u0026#39;] = [\r{\rheader: \u0026#39;Name\u0026#39;,\rcell: ({ name }) =\u0026gt; name,\rsortingField: \u0026#39;name\u0026#39;,\rminWidth: 175,\r},\r{\rheader: \u0026#39;Sold (last month)\u0026#39;,\rcell: ({ sold }) =\u0026gt; sold,\rsortingField: \u0026#39;sold\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Produced (last month)\u0026#39;,\rcell: ({ produced }) =\u0026gt; produced,\rsortingField: \u0026#39;produced\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Estimated (next month)\u0026#39;,\rcell: ({ estimated }) =\u0026gt; estimated,\rsortingField: \u0026#39;estimated\u0026#39;,\rminWidth: 150,\r},\r{\rheader: \u0026#39;Retail price (USD)\u0026#39;,\rcell: ({ retailPrice }) =\u0026gt; retailPrice,\rsortingField: \u0026#39;retailPrice\u0026#39;,\rminWidth: 160,\r},\r{\rheader: \u0026#39;Total revenue (USD)\u0026#39;,\rcell: ({ totalRevenue }) =\u0026gt; totalRevenue,\rsortingField: \u0026#39;totalRevenue\u0026#39;,\rminWidth: 180,\r},\r{\rheader: \u0026#39;Total cost (USD)\u0026#39;,\rcell: ({ totalCost }) =\u0026gt; totalCost,\rsortingField: \u0026#39;totalCost\u0026#39;,\rminWidth: 180,\r},\r];\rconst EmptyState = ({ title, subtitle, action }: { title: string; subtitle: string; action: ReactNode }) =\u0026gt; {\rreturn (\r\u0026lt;Box textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r\u0026lt;Box variant=\u0026#34;strong\u0026#34; textAlign=\u0026#34;center\u0026#34; color=\u0026#34;inherit\u0026#34;\u0026gt;\r{title}\r\u0026lt;/Box\u0026gt;\r\u0026lt;Box variant=\u0026#34;p\u0026#34; padding={{ bottom: \u0026#39;s\u0026#39; }} color=\u0026#34;inherit\u0026#34;\u0026gt;\r{subtitle}\r\u0026lt;/Box\u0026gt;\r{action}\r\u0026lt;/Box\u0026gt;\r);\r};\rexport interface VariationTableProps {\rflavors: Flavor[];\r}\rconst getHeaderCounterText = (items: readonly Flavor[] = [], selectedItems: readonly Flavor[] = []) =\u0026gt; {\rreturn selectedItems \u0026amp;\u0026amp; selectedItems.length \u0026gt; 0 ? `(${selectedItems.length}/${items.length})` : `(${items.length})`;\r};\rexport default function VariationTable({ flavors }: VariationTableProps) {\rconst [preferences, setPreferences] = useState\u0026lt;CollectionPreferencesProps[\u0026#39;preferences\u0026#39;]\u0026gt;({ pageSize: 20 });\rconst { items, filterProps, actions, filteredItemsCount, paginationProps, collectionProps } = useCollection\u0026lt;Flavor\u0026gt;(\rflavors,\r{\rfiltering: {\rnoMatch: (\r\u0026lt;EmptyState\rtitle=\u0026#34;No matches\u0026#34;\rsubtitle=\u0026#34;We canâ€™t find a match.\u0026#34;\raction={\u0026lt;Button onClick={() =\u0026gt; actions.setFiltering(\u0026#39;\u0026#39;)}\u0026gt;Clear filter\u0026lt;/Button\u0026gt;}\r/\u0026gt;\r),\rempty: (\r\u0026lt;EmptyState title=\u0026#34;No flavors\u0026#34; subtitle=\u0026#34;No flavors to display.\u0026#34; action={\u0026lt;Button\u0026gt;Create flavor\u0026lt;/Button\u0026gt;} /\u0026gt;\r),\r},\rpagination: { pageSize: preferences?.pageSize },\rsorting: { defaultState: { sortingColumn: columnDefinitions[0] } },\rselection: {},\r}\r);\rreturn (\r\u0026lt;Table\u0026lt;Flavor\u0026gt;\r{...collectionProps}\ritems={items}\rcolumnDefinitions={columnDefinitions}\rstickyHeader={true}\rvariant=\u0026#34;full-page\u0026#34;\rariaLabels={{\rselectionGroupLabel: \u0026#39;Items selection\u0026#39;,\ritemSelectionLabel: ({ selectedItems }, item) =\u0026gt; {\rconst isItemSelected = selectedItems.filter(i =\u0026gt; i.name === item.name).length;\rreturn `${item.name} is ${isItemSelected ? \u0026#39;\u0026#39; : \u0026#39;not \u0026#39;}selected`;\r},\rtableLabel: \u0026#39;Flavors table\u0026#39;,\r}}\rresizableColumns={true}\rheader={\r\u0026lt;Header\rvariant=\u0026#34;awsui-h1-sticky\u0026#34;\rcounter={getHeaderCounterText(flavors, collectionProps.selectedItems)}\ractions={\r\u0026lt;SpaceBetween size=\u0026#34;s\u0026#34; direction=\u0026#34;horizontal\u0026#34;\u0026gt;\r\u0026lt;Button disabled={collectionProps.selectedItems?.length === 0}\u0026gt;Edit\u0026lt;/Button\u0026gt;\r\u0026lt;Button href=\u0026#34;/create-flavor/index.html\u0026#34; variant=\u0026#34;primary\u0026#34;\u0026gt;\rCreate flavor\r\u0026lt;/Button\u0026gt;\r\u0026lt;/SpaceBetween\u0026gt;\r}\r\u0026gt;\rFlavors\r\u0026lt;/Header\u0026gt;\r}\rpagination={\u0026lt;Pagination {...paginationProps} /\u0026gt;}\rfilter={\r\u0026lt;TextFilter\r{...filterProps}\rfilteringPlaceholder=\u0026#34;Find flavors\u0026#34;\rcountText={getFilterCounterText(filteredItemsCount)}\r/\u0026gt;\r}\rpreferences={\r\u0026lt;CollectionPreferences\rpreferences={preferences} // Specifies the current preference values\rpageSizePreference={{\r// Configures the built-in \u0026#34;page size selection\u0026#34; preference\rtitle: \u0026#39;Select page size\u0026#39;,\roptions: [\r{ value: 10, label: \u0026#39;10 resources\u0026#39; },\r{ value: 20, label: \u0026#39;20 resources\u0026#39; },\r{ value: 50, label: \u0026#39;50 resources\u0026#39; },\r{ value: 100, label: \u0026#39;100 resources\u0026#39; },\r],\r}}\ronConfirm={({ detail }) =\u0026gt; setPreferences(detail)} // Called when the user confirms a preference change using the confirm button in the modal footer.\rtitle=\u0026#34;Preferences\u0026#34; // Specifies the title of the preferences modal dialog.\rconfirmLabel=\u0026#34;Confirm\u0026#34; // Label of the confirm button in the modal footer.\rcancelLabel=\u0026#34;Cancel\u0026#34; // Label of the cancel button in the modal footer.\r/\u0026gt;\r}\rselectionType=\u0026#34;single\u0026#34;\r/\u0026gt;\r);\r} See the screenshot of how the page looks like after this step.\r"
},
{
	"uri": "//localhost:1313/2-basic-layout/2-9-test-dark-compact-mode/",
	"title": "Test dark and compact modes",
	"tags": [],
	"description": "",
	"content": "Cloudscape supports:\nVisual modes used to optimize the user interface based on environmental conditions and user preferences. We support light and dark modes. Density modes used to optimize data density. We support comfortable and compact modes. Open the developer tools built into your browser and:\nToggle dark and light modes by executing the following command in the console document.body.classList.toggle(\u0026#39;awsui-dark-mode\u0026#39;) Toggle compact and comfortable modes by executing the following command in the console document.body.classList.toggle(\u0026#39;awsui-compact-mode\u0026#39;) See the screenshot of how the page looks like in the different modes.\r"
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-9-dark-compact-mode/",
	"title": "Test dark and compact modes",
	"tags": [],
	"description": "",
	"content": "Cloudscape supports:\nVisual modes used to optimize the user interface based on environmental conditions and user preferences. We support light and dark modes. Density modes used to optimize data density. We support comfortable and compact modes. Open the developer tools built into your browser and:\nToggle dark and light modes by executing the following command in the console document.body.classList.toggle(\u0026#39;awsui-dark-mode\u0026#39;) Toggle compact and comfortable modes by executing the following command in the console document.body.classList.toggle(\u0026#39;awsui-compact-mode\u0026#39;) See the screenshot of how the page looks like in the different modes.\rDark mode Compact mode Light mode "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]